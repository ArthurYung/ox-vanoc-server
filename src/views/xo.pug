extends base.pug

block styles
  style(type="text/css").
    .icon svg {
      animation: connectAnimate 2s infinite
    }
    .textarea {
      display: block;
      box-sizing: border-box;
      padding: 4px 10px;
      width: 92%;
      margin: 0 auto;
      font-size: 20px;
      font-weight: bolder;
      margin-top: 18px;
      border: none;
      border-radius: 4px;
      background: #fff;
      height: 140px;
      border: 1px solid #d1e328;
    }

    .button {
      width: 92%;
      height: 48px;
      line-height: 48px;
      border-radius: 4px;
      font-size: 16px;
      background-color: #fff;
      box-shadow: 2px 2px 4px rgba(0, 0, 0, .3);
      box-sizing: border-box;
      padding: 0 24px;
      text-align: center;
      animation: appendHistory .5s;
      color: #111;
      margin: 0 auto;
      margin-bottom: 6px;
    }
    .sub-text {
      width: 92%;
      margin: 6px auto;
      text-align: center;
      font-size: 18px;
    }
    .auto-view:active {
      background-color: #3b3937;
    }
    .auto-view {
      background-color: #000;
      color: #fff;
    }
    .picture-view:active {
      background-color: #f5ff96
    }
    .picture-view {
      margin-top: 24px
    }
    .hide-input {
      position: fixed;
      left:-999px;
      top: 0;
      opacity: 0;
      width: 1px;
      height: 1px;
    }
    .activity-box {
      position: fixed;
      top: 0;
      height: 32px;
      background: #000;
      box-shadow: 0 3px 10px rgba(0,0,0,.4);
      transition: transform .3s ease-out;
      -webkit-transition: transform .3s ease-out;
      width: 50vw;
      left: 25%;
      border-radius: 0 0 12px 12px;
      transform: translate3d(0, -150%, 0);
      -webkit-transform: translate3d(0, -150%, 0)
    }
    .activity-text {
      text-align: center;
      color: #fff;
      font-size: 13px;
      padding-top: 4px;
      padding-bottom: 2px;
    }
    .activity-progress {
      width: 80%;
      margin: 0 auto;
      transition: transform .15s ease-out;
      -webkit-transition: transform .15s ease-out;
      background: #e8ff09;
      height: 1px;
      transform: translate3d(0, 0, 0) scaleX(0);
      -webkit-transform: translate3d(0, 0, 0) scaleX(0);
      transform-origin: left center;
      -webkit-transform-origin: left center;
    }
    .activity-progress-inner {

    }
    
    @keyframes connectAnimate {
      0% {
        -webkit-transform: rotate(0);
        transform: rotate(0);
      }

      30% {
        -webkit-transform: rotate(180deg);
        transform: rotate(180deg);
      }

      60% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
      }

      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
      }
    }

block icon
  svg(xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20")
    path(
      stroke-width="0"
      d="M0.19437961214869914,4.9223572193117535 L4.964873598924411,0.15186323253616602 L10.032495382626506,5.219443486087077 L15.100117166328737,0.15186323253616602 L19.87065597929942,4.9223572193117535 L14.80303287717972,9.989979003013923 L19.87065597929942,15.057600786716177 L15.100117166328737,19.82813959968683 L10.032495382626506,14.760516497567146 L4.964873598924411,19.82813959968683 L0.19437961214869914,15.057600786716177 L5.26195986569969,9.989979003013923 L0.19437961214869914,4.9223572193117535 z"
    )

block main
  div#content.content
  textarea#textarea.textarea(
    placeholder="请将文本或图片粘贴至此处，或者手动输入文本。"
  )
  div#picture.picture-view.button 选择图片
  div#auto.auto-view.button 文字识别
  div.sub-text [文字识别说明]<br>您可以选择一张图片发送至连接中的电脑，将在电脑端选择识别图片中文字进行复制。
  input#pictureTarget.hide-input(type="file" accept="image/*" multiple="true")
  input#autoTarget.hide-input(type="file" accept="image/*" multiple="true")

  div#activity.activity-box
    div.activity-text 正在发送...
    div#progress.activity-progress

block scripts
  script.
    const $textarea = document.getElementById('textarea')
    const $activity = document.getElementById('activity')
    const $progress = document.getElementById('progress')

    let activeStatus = 0

    const updateProgress = (val) => {
      $progress.style.transform = 'translate3d(0, 0, 0) scaleX(' + val + ')';
      $progress.style.webkitTransform = 'translate3d(0, 0, 0) scaleX(' + val + ')';
    }

    const activeStart = () => {
      activeStatus = 1
      updateProgress(0)
      setTimeout(() => {
        $activity.style.transform = 'translate3d(0,0,0)';
        $activity.style.webkitTransform = 'translate3d(0,0,0)';
      }, 150)
    }

    const activeDone = () => {
      updateProgress(1)
      setTimeout(() => {
        $activity.style.transform = 'translate3d(0,-150%,0)';
        $activity.style.webkitTransform = 'translate3d(0,-150%,0)';
        activeStatus = 0
      }, 600)
    }

    const base64ToFile = (dataurl, filename) => {
      const arr = dataurl.split(',')
      const mime = arr[0].match(/:(.*?);/)[1]
      const bstr = atob(arr[1])
      let n = bstr.length
      const u8arr = new Uint8Array(n);
      while(n--){
        u8arr[n] = bstr.charCodeAt(n);
      }
      return new File([u8arr], filename, {type:mime});
    }

    let remoteCandidates = []
    let currentConnect

    function peerConnectCreator() {
      this.pc = null
      this.dataChannel = null
      this.connected = false
      this.heartListenerTimeout = null
      this.heartInterval = null
      this.sendQueue = []
      this.buffers = []
      this.buffersLength = 0
      this.remoteCandidates = []
      this.holder = false
      this.destroyed = false
      this.init()
    }

    peerConnectCreator.prototype.loopFetchRemote = function () {
      getJson('check').then(res => {
        if (this.connected || this.destroyed) {
          return
        }

        if (res.code !== 0) {
          errorMessage('连接失败:(1)\n' + res.message)
          return
        }

        if (res.data.candidate1) {
          this.filterIceCandidate(res.data.candidate1)
        } 
        
        setTimeout(() => {
          this.loopFetchRemote()
        }, 1000)
      })
    }

    peerConnectCreator.prototype.filterIceCandidate = function (candidates) {
      const usefulIceCandidates = candidates.filter(
        candidate => !this.remoteCandidates.find(remote => remote.candidate === candidate.candidate)
      )
      usefulIceCandidates.forEach(candidate => this.addIceCandidate(candidate))
      this.remoteCandidates = candidates
    }

    peerConnectCreator.prototype.addIceCandidate = function (candidate) {
      this.pc.addIceCandidate(new nativeRTCIceCandidate(candidate))
    }
    peerConnectCreator.prototype.startHeartListener = function () {
      // 初始化心跳包监听，5秒无应答做断开处理
      clearTimeout(this.heartListenerTimeout)
      this.heartListenerTimeout = setTimeout(() => {
        errorMessage('<div onclick="reloadPage()">连接已中断, 点击尝试重连</div>')
      }, 5000)
    }

    peerConnectCreator.prototype.holderTimeout = function () {
      this.holder = true
      this.send('[holder]0')
      clearTimeout(this.heartListenerTimeout)
    }

    peerConnectCreator.prototype.dropHolder = function () {
        this.holder = false
        this.send('[connect]0')
    }

    peerConnectCreator.prototype.ondataChannel = function () {
      this.pc.ondatachannel = (event) => {
        console.log('on data start')
        const channel = event.channel;
        // 数据连接打开时回调
        channel.onopen = (event) => {
          this.connected = true
          this.sendQueue.forEach(content => {
            channel.send(content)
          })
          channel.send('[connect]0');
          postJson('update', { status: 4 })

          // 数据建立连接后发送心跳包，并更新状态
          this.heartInterval = setInterval(() => {
            channel.send('[heart]0')
          }, 1000)
        }

        // 接收到数据的回调
        channel.onmessage = (event) => {
          console.log(event.data)
          if (typeof event.data !== 'string' || this.holder) {
            return
          }

          const dataParsed = event.data.match(/(\[.+?\])(.+)$/)
          const type = dataParsed ? dataParsed[1] : ''
          const content = dataParsed ? dataParsed[2] : ''
          if (type === '[connect]') {
            pageLoading.setText('连接成功!')
            pageLoading.done()
          }

          if (type === '[connect]' || type === '[heart]') {
            this.startHeartListener()
          }

          if (type === '[info]') {
            this.sendArrayBuffer()
          }
        }

        this.dataChannel = channel
      }
    }

    peerConnectCreator.prototype.onIceServer = function () {
      // 本地发现ice服务器
      this.pc.onicecandidate = (e) => {
        console.log('on data', e)
        if (this.destroyed) return
        if (e.candidate) {
          // candidate2: e.candidate
          postJson('update', { candidate2: e.candidate }).then(res => {
            if (res.code !== 0) {
              errorMessage( '连接失败:(2)\n' + res.message)
              return
            }
            clearTimeout(this.switchTimeout)
            this.switchTimeout = setTimeout(() => {
              // 5秒后如果还是连接失败，清除当前cookie
              if (!this.connected) {
                //- console.log(this)
                //- getJson('clean')
                //- errorMessage('连接失败:(5)\n请重新扫码')
                postJson('update', {
                  upgrade: 1
                }).then(res => {
                  switchWebsocket()
                  this.destroy()
                  pageLoading.setText('切换为websocket模式...')
                  currentConnect = new WebSocketConnect()
                })
              }
            }, 10000)
          }).catch(err => {
            errorMessage('接口错误:\n' + res.message)
          })
        }
      }
    }

    peerConnectCreator.prototype.createAnswer = function () {
      // 创建一个answer
      this.pc.createAnswer().then((answer) => {
        // 发送answer到服务器
        postJson('update', { answer: answer.sdp }).then(res => {
          if (res.code !== 0) {
            errorMessage('连接失败:(3)\n[' + res.message + ']')
          } else {
            // 设置anwer到本地
            this.pc.setLocalDescription(answer)
          }
        }).catch(err => {
            errorMessage('网络错误\n[' + err.message + ']')
        })
      })
    }

    peerConnectCreator.prototype.setRemote = function () {
      // 将服务器中的offer配置设置到远端remote
      this.pc.setRemoteDescription(new RTCSessionDescription({ 
        type: 'offer',
        sdp: window._OFFER_SDP_
      })).then(() => {
        this.createAnswer()
        // 启动remote轮询
        this.loopFetchRemote()
      }).catch(err => {
        errorMessage('连接失败:(4)\n[' + err.message + ']')
      })
    }

    peerConnectCreator.prototype.send = function (content) {
      if (this.connected) {
        this.dataChannel.send(content)
      } else {
        this.sendQueue.push(content)
      }
    }

    peerConnectCreator.prototype.sendArrayBuffer = function () {
      if (!this.buffers.length) return
      this.send(this.buffers.shift())
      this.buffers.length
        ? updateProgress((this.buffersLength - this.buffers.length) / this.buffersLength)
        : activeDone()
    }

    peerConnectCreator.prototype.sendFragmentArrayBuffer = function (buffers, fileType, sendType) {
      const currentSendType = sendType || 'buffer'
      this.buffers = buffers
      this.buffersLength = buffers.length
      this.send(`[${currentSendType}]${fileType}:${buffers.length}`)
      this.sendArrayBuffer()
    }

    peerConnectCreator.prototype.sendImage = function (file, sendType) {
      if (activeStatus) {
        return
      }

      if (file.size > 5 * 1024 * 1024) {
        alert('图片太大了，老夫扛不住啊')
        return
      }

      if (!file.type.startsWith('image')) {
        alert('只支持图片哦')
        return
      }

      activeStart()
      const fragmentSize = 1024 * 8 // 每次send最大只有8kb
      const fileReader = new FileReader()
      fileReader.onload = () => {
        const buffer = fileReader.result
        const size = buffer.byteLength
        const partitionLength = Math.abs(size / fragmentSize)
        const fragments = []
        for (let i = 0; i < partitionLength; i++) {
          fragments.push(buffer.slice(i * fragmentSize, (i + 1) * fragmentSize))
        }
        this.sendFragmentArrayBuffer(fragments, file.type, sendType)
      }
      fileReader.readAsArrayBuffer(file)
    }

    peerConnectCreator.prototype.sendText = function (text) {
      if (activeStatus) return
      activeStart()
      this.send('[text]' + text.replace(/\n/g, '\\n'))
      setTimeout(() => {
        activeDone()
      }, 300)
    }

    peerConnectCreator.prototype.init = function () {
      this.pc = new RTCPeerConnection(options);
      this.ondataChannel()
      this.onIceServer()
      this.setRemote()
    }

    peerConnectCreator.prototype.destroy = function() {
      this.connected = false
      this.destroyed = true
      this.pc && this.pc.close()
      this.dataChannel && this.dataChannel.close()
      clearTimeout(this.heartListenerTimeout)
      clearInterval(this.heartInterval)
    }


    function WebSocketConnect () {
      this.ws = null
      this.connected = false
      this.buffers = []
      this.buffersLength = 0
      this.init()
    }

    WebSocketConnect.prototype.send = function (content) {
      if (this.connected) {
        this.ws.send(content)
      }
    }
    WebSocketConnect.prototype.holderTimeout = function () {}
    WebSocketConnect.prototype.dropHolder = function () {}
    WebSocketConnect.prototype.sendArrayBuffer = peerConnectCreator.prototype.sendArrayBuffer
    WebSocketConnect.prototype.sendFragmentArrayBuffer = peerConnectCreator.prototype.sendFragmentArrayBuffer
    WebSocketConnect.prototype.sendCompressImage = peerConnectCreator.prototype.sendImage
    WebSocketConnect.prototype.sendText = peerConnectCreator.prototype.sendText
    WebSocketConnect.prototype.sendImage = function (file, type) {
      if (!file.type.startsWith('image')) {
        alert('只支持图片哦')
        return
      }
      const reader = new FileReader()
      const compress = Math.max(0.3, 0.92 - file.size / (8 * 1024 * 1024))
      reader.onload = () => {
        const img = new Image()
        const canvas = document.createElement('canvas')
        const ctx = canvas.getContext('2d')
        img.onload = () => {
          canvas.width = img.width
          canvas.height = img.height
          ctx.drawImage(img, 0, 0)

          // canvas压缩只支持有损图片格式 image/jpeg
          const compressDataUrl = canvas.toDataURL('image/jpeg', compress)
          const compressFile = base64ToFile(compressDataUrl, file.name)
          console.log(compressFile, type)
          this.sendCompressImage(compressFile, type)
        }

        img.src = reader.result
      }
      reader.readAsDataURL(file)
    }

    WebSocketConnect.prototype.init = function () {
      console.log('init socket')
      const pro = window._NODE_ENV === 'prod' ? 'wss://' : 'ws://'
      this.ws = new WebSocket(pro + apiHost + '/ws/?uid=' + window._BASE_UID_ + '&type=mobile')
      this.ws.onopen = () => {
        this.connected = true
        this.ws.binaryType = 'arraybuffer'
        this.ws.send('[connected]1')
      }

      this.ws.onmessage = (event) => {
          console.log(event.data)
          if (typeof event.data !== 'string' || this.holder) {
            return
          }

          const dataParsed = event.data.match(/(\[.+?\])(.+)$/)
          const type = dataParsed ? dataParsed[1] : ''
          const content = dataParsed ? dataParsed[2] : ''

          if (type === '[connect]') {
            this.ws.send('[connect]2')
            pageLoading.setText('连接成功!')
            pageLoading.done()
          }

          if (type === '[info]') {
            this.sendArrayBuffer()
          }
      }

      this.ws.onclose = (e) => {
        errorMessage('连接已断开')
      }

      this.ws.onerror = (e) => {
        console.log('connect error', e)
      }
    }

    

    // 给element绑定事件
    function bindElementEvent () {
      $textarea.addEventListener('paste', (e) => {
        const file = e.clipboardData.files[0]
        const text = e.clipboardData.getData('text/plain')
        if (file) {
          currentConnect.sendImage(file)
        }

        if (text) {
          currentConnect.sendText(text)
        }
        e.preventDefault()
      })

      $textarea.addEventListener('blur', () => {
        currentConnect.sendText($textarea.value)
      })

      const $p = document.getElementById('picture')
      const $pt = document.getElementById('pictureTarget')

      const $a = document.getElementById('auto')
      const $at = document.getElementById('autoTarget')

      $p.addEventListener('click', () => {
        currentConnect.holderTimeout()
        $pt.click()
      })

      $a.addEventListener('click', () => {
        currentConnect.holderTimeout()
        $at.click()
      })

      $pt.addEventListener('change', (e) => {
        if (e.target.files.length) {
          currentConnect.dropHolder()
          currentConnect.sendImage(e.target.files[0])
        }
      })

      $at.addEventListener('change', (e) => {
        if (e.target.files.length) {
          currentConnect.dropHolder()
          currentConnect.sendImage(e.target.files[0], 'district')
        }
      })

      document.body.addEventListener('touchstart', () => {
        if (currentConnect.holder) {
          currentConnect.dropHolder()
        }
      })

      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
          currentConnect.holderTimeout()
        } else if (document.visibilityState === 'visible') {
          currentConnect.dropHolder()
        }
      })
    }

    function start() {
      if (!PeerConnection) {
        errorMessage(isWeixin() ? '哦豁，微信浏览器有点不行，右上角点击使用safari打开' : '哦豁，您的浏览器有点生锈，请更换最新浏览器打开(IOS微信用户)')
        return
      }

      if (window._CONNECT_TYPE_ === 'WEBRTC') {
        pageLoading.setText('正在尝试建立webRTC通信..')
        currentConnect = new peerConnectCreator()
      } else {
        pageLoading.setText('正在尝试建立WebSocket通信..')
        postJson('update', {
          upgrade: 1
        }).then(res => {
          pageLoading.setText('切换为websocket模式...')
          currentConnect = new WebSocketConnect()
        })
      }

      bindElementEvent()
    }
    start()

    
